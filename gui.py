#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.24.1
#  in conjunction with Tcl version 8.6
#    Aug 06, 2019 04:01:36 PM -04  platform: Windows NT
#usage:  %Run gui.py --cascade haarcascade_frontalface_default.xml --encodings encodings.pickle

from tkinter import PhotoImage
from tkinter import ttk
from tkinter import *
from tkinter.messagebox import showinfo
from imutils.video import VideoStream
from imutils.video import FPS
from PIL import Image
from PIL import ImageTk
from imutils.video import VideoStream
from imutils.video import FPS
from datetime import datetime
from datetime import date
import imutils
import PIL
import face_recognition
import argparse
import imutils
import pickle
import time
import cv2
import csv
import os
import sys


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import gui_support




def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root,LgW
    root = tk.Tk()
    top = Toplevel1 (root)
    gui_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    LgW= Toplevel(w)
    gui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

global ename
ename = "Babs"



class Toplevel1:
        def __init__(self,top=None):
                '''This class configures and populates the toplevel window.
                top is the toplevel containing window.'''
                _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
                _fgcolor = '#000000'  # X11 color: 'black'
                _compcolor = '#d9d9d9' # X11 color: 'gray85'
                _ana1color = '#d9d9d9' # X11 color: 'gray85'
                _ana2color = '#ececec' # Closest X11 color: 'gray92'
                font11 = "-family {Segoe UI} -size 12 -weight bold -slant "  \
                "roman -underline 0 -overstrike 0"
                font12 = "-family {Segoe UI} -size 10 -weight normal -slant "  \
                "italic -underline 0 -overstrike 0"
                font9 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
                "roman -underline 0 -overstrike 0"
                font13 = "-family {Microsoft YaHei} -size 15 -weight bold "  \
                "-slant roman -underline 0 -overstrike 0"
                font17 = "-family {Segoe UI Historic} -size 12 -weight normal "  \
                "-slant italic -underline 1 -overstrike 0"
                font28 = "-family Arial -size 16 -weight normal -slant roman "  \
                "-underline 0 -overstrike 0"
                font30 = "-family Gadugi -size 15 -weight bold -slant roman "  \
                "-underline 1 -overstrike 0"
                font40 = "-family {OCR A Extended} -size 36 -weight bold "  \
                "-slant roman -underline 1 -overstrike 0"
                font9 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
                "roman -underline 0 -overstrike 0"
                

                width= top.winfo_screenwidth()
                height= top.winfo_screenheight()
                top.geometry("%dx%d+0+0"%(width,height)) 
                top.wm_state('normal')
                self.panel=None

                top.title("PGC Facial Recognition System")
                root.iconphoto(True, PhotoImage(file="./icons/Taskbar_Icon40x40.png"))
                
                
                #root = tk.Tk()
                #img = PhotoImage(file='icon.ico')
                #root.tk.call('wm','iconphoto',root._w,img)
                #top.wm_iconbitmap("icons/icon.png")

                top.configure(background="#d8d8d8")
                top.configure(highlightbackground="#d9d9d9")
                top.configure(highlightcolor="black")

                self.menubar = tk.Menu(top,font=font9,bg=_bgcolor,fg=_fgcolor)
                top.configure(menu = self.menubar)

                self.sub_menu = tk.Menu(top,tearoff=0)
                self.menubar.add_cascade(menu=self.sub_menu,
                        activebackground="#ececec",
                        activeforeground="#000000",
                        background="#d9d9d9",
                        font="TkMenuFont",
                        foreground="#000000",
                        label="File")
                self.sub_menu.add_command(command =  self.loginPopup,
                        activebackground="#ececec",
                        activeforeground="#000000",
                        background="#d8d8d8",
                        font="TkMenuFont",
                        foreground="#000000",
                        label="Login")
                self.sub_menu.add_separator(
                        background="#d9d9d9")
                self.sub_menu.add_command(command=quit,
                        activebackground="#ececec",
                        activeforeground="#000000",
                        background="#d9d9d9",
                        font="TkMenuFont",
                        foreground="#000000",
                        label="Exit")
                
#--------[ home screen -----------------------------------------

#                self.root=top
#                self.panel = None
#                self.frame = None
#                self.vs = VideoStream(usePiCamera=True).start()
#                time.sleep(2.0)
#                # construct the argument parser and parse the arguments
#                ap = argparse.ArgumentParser()
#                ap.add_argument("-c", "--cascade", required=True,
#                    help = "path to where the face cascade resides")
#                ap.add_argument("-e", "--encodings", required=True,
#                    help="path to serialized db of facial encodings")
#                args = vars(ap.parse_args())
#                
#                # load the known faces and embeddings along with OpenCV's Haar
#                # cascade for face detection
#                print("[INFO] loading encodings + face detector...")
#                self.data = pickle.loads(open(args["encodings"], "rb").read())
#                self.detector = cv2.CascadeClassifier(args["cascade"])
                
                #self.loop()                

                #self.cameraFrame.configure(width=350, height= 350)

#---------------------------frame and label for employee access--------------------------------
                self.accessFrame = tk.LabelFrame(top)
                self.accessFrame.place(relx=0.099, rely=0.543, width=350, height= 200)
                #(relx=0.579, rely=0.664, relheight=0.255, relwidth=0.249)
               
                self.accessFrame.configure(relief='ridge')
                self.accessFrame.configure(font=font13)
                self.accessFrame.configure(foreground="black")
                self.accessFrame.configure(labelanchor="n")
                self.accessFrame.configure(relief="ridge")
                self.accessFrame.configure(text='''Access''')
                self.accessFrame.configure(background="#d9d9d9")
                #self.accessFrame.configure(width=350)

#----------------------label for employee access on main window------------------------------- 
                self.accessLabel = tk.Label(self.accessFrame)
                self.accessLabel.place(relx=0.1859, rely=0.41, height=40, width=220, bordermode='ignore')
                self.accessLabel.configure(activebackground="#f9f9f9")
                self.accessLabel.configure(activeforeground="black")
                self.accessLabel.configure(anchor='w')
                self.accessLabel.configure(background="#4dd823")
                self.accessLabel.configure(cursor="fleur")
                self.accessLabel.configure(disabledforeground="#a3a3a3")
                self.accessLabel.configure(font=font40)
                self.accessLabel.configure(foreground="#000000")
                self.accessLabel.configure(highlightbackground="#3cd842")
                self.accessLabel.configure(highlightcolor="black")
                self.accessLabel.configure(text='''Granted''')
                self.accessLabel.configure(width=220)
#-----///////////////////////////////////////////////////////////////////////////////////////////               

                

                self.timeFrame = tk.Frame(top)
                self.timeFrame.place(relx=0.529, rely=0.5515, width = 400, height = 190 ) #relheight=0.255, relwidth=0.249)
                self.timeFrame.configure(relief='ridge')
                self.timeFrame.configure(borderwidth="2")
                self.timeFrame.configure(relief="ridge")
                self.timeFrame.configure(background="#d9d9d9")
                self.timeFrame.configure(highlightcolor="#1a2463")
                #self.timeFrame.configure(width=350)

                self.dateLabel = tk.Label(self.timeFrame)
                self.dateLabel.place(relx=0.082, rely=0.129, height=40, width=130)
                self.dateLabel.configure(activebackground="#f9f9f9")
                self.dateLabel.configure(activeforeground="black")
                self.dateLabel.configure(anchor='w')
                self.dateLabel.configure(background="#d9d9d9")
                self.dateLabel.configure(disabledforeground="#a3a3a3")
                self.dateLabel.configure(font=font30)
                self.dateLabel.configure(foreground="#000000")
                self.dateLabel.configure(highlightbackground="#d9d9d9")
                self.dateLabel.configure(highlightcolor="black")
                self.dateLabel.configure(text='''Date:''')

                self.timeLabel = tk.Label(self.timeFrame)
                self.timeLabel.place(relx=0.082, rely=0.581, height=40, width=130)
                self.timeLabel.configure(activebackground="#f9f9f9")
                self.timeLabel.configure(activeforeground="black")
                self.timeLabel.configure(anchor='w')
                self.timeLabel.configure(background="#d9d9d9")
                self.timeLabel.configure(disabledforeground="#a3a3a3")
                self.timeLabel.configure(font=font30)
                self.timeLabel.configure(foreground="#000000")
                self.timeLabel.configure(highlightbackground="#d9d9d9")
                self.timeLabel.configure(highlightcolor="black")
                self.timeLabel.configure(text='''Time:'''  )

                self.dateDisp = tk.Label(self.timeFrame)
                self.dateDisp.place(relx=0.259, rely=0.159, height=40, width=270)
                self.dateDisp.configure(activebackground="#f9f9f9")
                self.dateDisp.configure(activeforeground="#000000")
                self.dateDisp.configure(anchor='nw')
                self.dateDisp.configure(background="#d9d9d9")
                self.dateDisp.configure(compound='center')
                self.dateDisp.configure(disabledforeground="#a3a3a3")
                self.dateDisp.configure(font=font28)
                self.dateDisp.configure(foreground="#220c93")
                self.dateDisp.configure(highlightbackground="#d9d9d9")
                self.dateDisp.configure(highlightcolor="#2d03ff")
                self.dateDisp.configure(text='''August 16,2019''')
                self.dateDisp.configure(width=300)

                self.timeDisp = tk.Label(self.timeFrame)
                self.timeDisp.place(relx=0.259, rely=0.611, height=40, width=200)
                self.timeDisp.configure(activebackground="#f9f9f9")
                self.timeDisp.configure(activeforeground="#000000")
                self.timeDisp.configure(anchor='nw')
                self.timeDisp.configure(background="#d9d9d9")
                self.timeDisp.configure(compound='center')
                self.timeDisp.configure(disabledforeground="#a3a3a3")
                self.timeDisp.configure(font=font28)
                self.timeDisp.configure(foreground="#220c93")
                self.timeDisp.configure(highlightbackground="#d9d9d9")
                self.timeDisp.configure(highlightcolor="#2d03ff")
                self.timeDisp.configure(text='''07:24:12''')
                self.timeDisp.configure(width=200)       

                self.eDataFrame = tk.LabelFrame(top)
                self.eDataFrame.place(relx=0.45, rely=0.076, width = 600, height = 360)#relheight=0.474 , relwidth=0.44)
                self.eDataFrame.configure(relief='groove')
                self.eDataFrame.configure(font=font17)
                self.eDataFrame.configure(foreground="black")
                self.eDataFrame.configure(labelanchor="n")
                self.eDataFrame.configure(text='''Employee Data''')
                self.eDataFrame.configure(background="#d9d9d9")
                self.eDataFrame.configure(highlightbackground="#f0f0f0")
                self.eDataFrame.configure(highlightcolor="black")
                self.eDataFrame.configure(takefocus="1")
                #self.eDataFrame.configure(width=500)

                self.nameLabelHead = tk.Label(self.eDataFrame)
                self.nameLabelHead.place(relx=0.075, rely=0.215, height=40, width=75
                        , bordermode='ignore')
                self.nameLabelHead.configure(activebackground="#f9f9f9")
                self.nameLabelHead.configure(activeforeground="black")
                self.nameLabelHead.configure(anchor='w')
                self.nameLabelHead.configure(background="#d9d9d9")
                self.nameLabelHead.configure(disabledforeground="#a3a3a3")
                self.nameLabelHead.configure(font=font30)
                self.nameLabelHead.configure(foreground="#000000")
                self.nameLabelHead.configure(highlightbackground="#d9d9d9")
                self.nameLabelHead.configure(highlightcolor="black")
                self.nameLabelHead.configure(text='''Name:''')

                self.dptLabelHead = tk.Label(self.eDataFrame)
                self.dptLabelHead.place(relx=0.075, rely=0.462, height=40, width=150
                        , bordermode='ignore')
                self.dptLabelHead.configure(activebackground="#f9f9f9")
                self.dptLabelHead.configure(activeforeground="black")
                self.dptLabelHead.configure(anchor='w')
                self.dptLabelHead.configure(background="#d9d9d9")
                self.dptLabelHead.configure(disabledforeground="#a3a3a3")
                self.dptLabelHead.configure(font=font30)
                self.dptLabelHead.configure(foreground="#000000")
                self.dptLabelHead.configure(highlightbackground="#d9d9d9")
                self.dptLabelHead.configure(highlightcolor="black")
                self.dptLabelHead.configure(text='''Department:''')

                self.statusLabelHead = tk.Label(self.eDataFrame)
                self.statusLabelHead.place(relx=0.075, rely=0.708, height=40, width=90
                        , bordermode='ignore')
                self.statusLabelHead.configure(activebackground="#f9f9f9")
                self.statusLabelHead.configure(activeforeground="black")
                self.statusLabelHead.configure(anchor='w')
                self.statusLabelHead.configure(background="#d9d9d9")
                self.statusLabelHead.configure(disabledforeground="#a3a3a3")
                self.statusLabelHead.configure(font=font30)
                self.statusLabelHead.configure(foreground="#000000")
                self.statusLabelHead.configure(highlightbackground="#d9d9d9")
                self.statusLabelHead.configure(highlightcolor="black")
                self.statusLabelHead.configure(text='''Status:''')

                self.statusDisplay = tk.Label(self.eDataFrame)
                self.statusDisplay.place(relx=0.23, rely=0.721, height=40, width=200
                        , bordermode='ignore')
                self.statusDisplay.configure(activebackground="#f9f9f9")
                self.statusDisplay.configure(activeforeground="black")
                self.statusDisplay.configure(anchor='nw')
                self.statusDisplay.configure(background="#d9d9d9")
                self.statusDisplay.configure(compound='center')
                self.statusDisplay.configure(disabledforeground="#a3a3a3")
                self.statusDisplay.configure(font=font28)
                self.statusDisplay.configure(foreground="#220c93")
                self.statusDisplay.configure(highlightbackground="#d9d9d9")
                self.statusDisplay.configure(highlightcolor="black")
                self.statusDisplay.configure(text='''Trainee''')
                self.statusDisplay.configure(width=200)

                self.dptDisplay = tk.Label(self.eDataFrame)
                self.dptDisplay.place(relx=0.349, rely=0.474, height=30, width=300
                        , bordermode='ignore')
                self.dptDisplay.configure(activebackground="#f9f9f9")
                self.dptDisplay.configure(activeforeground="black")
                self.dptDisplay.configure(anchor='nw')
                self.dptDisplay.configure(background="#d9d9d9")
                self.dptDisplay.configure(compound='center')
                self.dptDisplay.configure(disabledforeground="#a3a3a3")
                self.dptDisplay.configure(font=font28)
                self.dptDisplay.configure(foreground="#220c93")
                self.dptDisplay.configure(highlightbackground="#d9d9d9")
                self.dptDisplay.configure(highlightcolor="black")
                self.dptDisplay.configure(text='''Electrical and Instrumentation''')
                self.dptDisplay.configure(width=300)
                
                self.employeeName = tk.StringVar()
                #self.employeeName = tk.StringVar()
                self.nameDisp = tk.Label(self.eDataFrame,textvariable=  self.employeeName)
                self.nameDisp.place(relx=0.221, rely=0.227, height=40, width=280
                        , bordermode='ignore')
                self.nameDisp.configure(activebackground="#f9f9f9")
                self.nameDisp.configure(activeforeground="#000000")
                self.nameDisp.configure(anchor='nw')
                self.nameDisp.configure(background="#d9d9d9")
                self.nameDisp.configure(compound='center')
                self.nameDisp.configure(disabledforeground="#a3a3a3")
                self.nameDisp.configure(font=font28)
                self.nameDisp.configure(foreground="#220c93")
                self.nameDisp.configure(highlightbackground="#d9d9d9")
                self.nameDisp.configure(highlightcolor="#2d03ff")
                #self.nameDisp.configure(textvariable= self.employeeName)#text='''David Ramjit''')
                
                self.root=top
                self.panel = None
                self.frame = None
                self.vs = VideoStream(usePiCamera=True).start()
                time.sleep(2.0)
                # construct the argument parser and parse the arguments
                ap = argparse.ArgumentParser()
                ap.add_argument("-c", "--cascade", required=True,
                    help = "path to where the face cascade resides")
                ap.add_argument("-e", "--encodings", required=True,
                    help="path to serialized db of facial encodings")
                args = vars(ap.parse_args())
                
                # load the known faces and embeddings along with OpenCV's Haar
                # cascade for face detection
                print("[INFO] loading encodings + face detector...")
                self.data = pickle.loads(open(args["encodings"], "rb").read())
                self.detector = cv2.CascadeClassifier(args["cascade"])
                self.loop()
                
                
                
                self.dateTime()

                
                
                
                
             
#-------------------this fn gets and prints date and time ----------------------
        def dateTime(self):
                today = date.today()
                self.Date1 = today.strftime("%B %d,%Y")
                print(self.Date1)
                
                self.time1 = time.localtime()
                self.cTime=time.strftime("%I:%M:%S", self.time1)
                print(self.cTime)
                
                

# -----------------------this block deals with administration login ----------------------- 
        
        def loginPopup(self):
                global LgW, usernameEntry, passwordEntry
                LgW = tk.Toplevel()
                LgW.wm_title("Login")
                LgW.geometry('350x150')
                LgW.resizable(0,0)
                #LgW.wm_iconbitmap('icons/icon.ico')
                
                self.usernameLabel = tk.Label(LgW, text="Username")
                self.passwordLable = tk.Label(LgW, text="Password")

                self.usernameEntry = tk.Entry(LgW)
                self.passwordEntry = tk.Entry(LgW, show="*")
                
               
                self.usernameLabel.grid(row=0,padx=50,pady=15)
                self.passwordLable.grid(row=1, padx= 50)
                self.usernameEntry.grid(row=0, column=1)
                self.passwordEntry.grid(row=1, column=1)

                self.loginbtn = ttk.Button(LgW, text="Login", command=self.CheckLogin)
                self.loginbtn.place(relx=0.54, rely=0.73)
        
                self.Cancel_logbtn = ttk.Button(LgW, text="Cancel",command=LgW.destroy)
                self.Cancel_logbtn.place(relx=0.29, rely=0.73)
                
        def loop(self):
                data = self.data
                detector=self.detector
                self.thread = None
                self.stopEvent = None

                # grab the frame from the video stream and resize it to
                # have a maximum width of 300 pixels
                
                self.frame = self.vs.read()
                self.frame = imutils.resize(self.frame, width=470)
                # OpenCV represents images in BGR order; however PIL
                # represents images in RGB order, so we need to swap
                # the channels, then convert to PIL and ImageTk format
                image = cv2.cvtColor(self.frame, cv2.COLOR_BGR2RGB)
                image = Image.fromarray(image)
                image = ImageTk.PhotoImage(image)
                #do stuff
                gray = cv2.cvtColor(self.frame, cv2.COLOR_BGR2GRAY)
                rgb = cv2.cvtColor(self.frame, cv2.COLOR_BGR2RGB)
                
                rects = detector.detectMultiScale(gray, scaleFactor=1.1, 
                minNeighbors=5, minSize=(30, 30),
                flags=cv2.CASCADE_SCALE_IMAGE)

                # OpenCV returns bounding box coordinates in (x, y, w, h) order
                # but we need them in (top, right, bottom, left) order, so we
                # need to do a bit of reordering
                boxes = [(y, x + w, y + h, x) for (x, y, w, h) in rects]

                # compute the facial embeddings for each face bounding box
                encodings = face_recognition.face_encodings(rgb, boxes)
                names = []
            
                print(encodings)
                self.employeeName.set("Unknown")
                # loop over the facial embeddings
                for encoding in encodings:
                    # attempt to match each face in the input image to our known
                    # encodings
                    matches = face_recognition.compare_faces(data["encodings"],
                        encoding)
                    name = "Unknown"
                    self.employeeName.set("Unknown")

                    # check to see if we have found a match
                    
            
                    if True in matches:
                        # find the indexes of all matched faces then initialize a
                        # dictionary to count the total number of times each face
                        # was matched
                        matchedIdxs = [i for (i, b) in enumerate(matches) if b]
                        counts = {}

                        # loop over the matched indexes and maintain a count for
                        # each recognized face face
                        for i in matchedIdxs:
                            name = data["names"][i]
                            counts[name] = counts.get(name, 0) + 1

                        # determine the recognized face with the largest number
                        # of votes (note: in the event of an unlikely tie Python
                        # will select first entry in the dictionary)
                        name = max(counts, key=counts.get)
                        print(name)
                       
                        self.ename =name
                        
                        self.employeeName.set(name)
                        #logEmployee(name,fileContent)

                    # update the list of names
                    names.append(name)

                # loop over the recognized faces
                for ((top, right, bottom, left), name) in zip(boxes, names):
                    # draw the predicted face name on the image
                    cv2.rectangle(self.frame, (left, top), (right, bottom),
                        (0, 255, 0), 2)
                    y = top - 15 if top - 15 > 15 else top + 15
                    cv2.putText(self.frame, name, (left, y), cv2.FONT_HERSHEY_SIMPLEX,
                        0.75, (0, 255, 0), 2)
                # if the panel is not None, we need to initialize it
                if self.panel is None:
                        self.panel = tk.Label(image=image)
                        self.panel.image = image
                        self.panel.place(relx=0.099, rely=0.085 )#,width =600, height= 600)
                        self.panel.configure(width = 350, height=350)
                        self.panel.configure(relief=SUNKEN)
                        
                        #self.panel.pack(side="left", x = 100, y = 200, padx=10, pady=10)
                        print("Initalizing window")

                # otherwise, simply update the panel
                else:
                        self.panel.configure(image=image)
                        self.panel.image = image
                self.root.after(1,self.loop)
                
        def CheckLogin(self):
                #print("clicked")           
                if self.usernameEntry.get() == "" and self.passwordEntry.get() == "":
                        #print("approved")
                        self.adminHome()
                        self.destroyLogWin()
                else:
                        tk.messagebox.showerror('Logininfo..','Invalid Login\nCheck Username and Password') # show error message
          
        def destroyLogWin(self):
                LgW.destroy()
                











                        

        def employeeReg(self): 
                eRegWin = tk.Toplevel()
                eRegWin.wm_title("PGC Facial Recognition System")
                eRegWin.geometry('700x500')
                #eRegWin.wm_iconbitmap('icons/icon.ico')
                self.style = ttk.Style() 

                self.FNameEntry = ttk.Entry(eRegWin)
                self.FNameEntry.place(relx=0.217, rely=0.133, relheight=0.047, relwidth=0.327)
                self.FNameEntry.configure(width=196)
                self.FNameEntry.configure(takefocus="")
                
                self.Emp_FirstName_ = ttk.Label(eRegWin)
                self.Emp_FirstName_.place(relx=0.05, rely=0.133, height=26, width=77 )
                self.Emp_FirstName_.configure(anchor='w')
                self.Emp_FirstName_.configure(justify='left')
                self.Emp_FirstName_.configure(text='''First Name:''')

                self.Emp_Surname_ = tk.Label(eRegWin)
                self.Emp_Surname_.place(relx=0.05, rely=0.289, height=26, width=80)
                self.Emp_Surname_.configure(text='''Last Name:''')
                self.Emp_Surname_.configure(width=90)


                self.LNameEntry = ttk.Entry(eRegWin)
                self.LNameEntry.place(relx=0.217, rely=0.289, relheight=0.047, relwidth=0.327)
                self.LNameEntry.configure(width=196)
                self.LNameEntry.configure(takefocus="")
                #self.LNameEntry.configure(cursor="ibeam")

                self.TLabel1 = ttk.Label(eRegWin)
                self.TLabel1.place(relx=0.017, rely=0.022, height=25, width=675)
                self.TLabel1.configure(relief="groove")
                self.TLabel1.configure(justify='center')
                self.TLabel1.configure(text='''Enter Employee Data''' )
                self.TLabel1.configure(width=582)
                self.TLabel1.configure(compound='center')

                self.selDpt = ttk.Combobox(eRegWin)
                self.selDpt.place(relx=0.217, rely=0.444, relheight=0.047, relwidth=0.238)
                self.value_list = ["E&I","Administration","Planning", "Mechanical"]
                self.selDpt.configure(values=self.value_list)
                self.selDpt.configure(takefocus="")

                self.Emp_Dpt = tk.Label(eRegWin)
                self.Emp_Dpt.place(relx=0.05, rely=0.44, height=26, width=90)
                self.Emp_Dpt.configure(anchor='w')
                self.Emp_Dpt.configure(justify='left')
                self.Emp_Dpt.configure(text='''Department:''')
                self.Emp_Dpt.configure(width=90)

                self.Emp_status = tk.Label(eRegWin)
                self.Emp_status.place(relx=0.05, rely=0.578, height=26, width=90)
                self.Emp_status.configure(anchor='w')
                self.Emp_status.configure(justify='left')
                self.Emp_status.configure(text='''Status:''')

                self.selStatus = ttk.Combobox(eRegWin)
                self.selStatus.place(relx=0.217, rely=0.57, relheight=0.047, relwidth=0.238)
                self.value_list = ["Full Time","Temporary","Trainee","Contractor"]
                self.selStatus.configure(values=self.value_list)
                self.selStatus.configure(takefocus="")


                self.Emp_access = tk.Label(eRegWin)
                self.Emp_access.place(relx=0.05, rely=0.722, height=26, width=90)
                self.Emp_access.configure(anchor='w')
                self.Emp_access.configure(justify='left')
                self.Emp_access.configure(text='''Access:''')

                self.selAccess = ttk.Combobox(eRegWin)
                self.selAccess.place(relx=0.217, rely=0.72, relheight=0.047, relwidth=0.238)
                self.value_list = ["Granted","Restricted","Unknown","Limited"]
                self.selAccess.configure(values=self.value_list)
                self.selAccess.configure(takefocus="")
               
                self.photoFrame = tk.Frame(eRegWin)
                self.photoFrame.place(relx=0.667, rely=0.289, relheight=0.344, relwidth=0.258)
                self.photoFrame.configure(relief='groove')
                self.photoFrame.configure(borderwidth="2")
                self.photoFrame.configure(relief="ridge")
                self.photoFrame.configure(background="#d9d9d9")
                self.photoFrame.configure(width=155)
               
                self.Capture_btn = ttk.Button(eRegWin)
                self.Capture_btn.place(relx=0.753, rely=0.644, height=24, width=65)
                self.Capture_btn.configure(text='''Capture''')

                self.Save_btn = ttk.Button(eRegWin)
                self.Save_btn.place(relx=0.81, rely=0.85, height=24, width=60)
                self.Save_btn.configure(text='''Save''',command = self.save)
                
                self.cancelReg_Btn = ttk.Button(eRegWin)
                self.cancelReg_Btn.place(relx=0.7, rely=0.85, height=24, width=60)
                self.cancelReg_Btn.configure(text='''Cancel''',command = eRegWin.destroy)
                
                #statusbar
                self.statusBar= tk.Label(eRegWin, text = "Saving data to file....")
                self.statusBar.configure(anchor=W, bd=1,relief =SUNKEN)
                self.statusBar.pack(side=BOTTOM, fill = X,)
                


        def adminHome (self): 
                global AdmWin
                AdmWin = tk.Toplevel()
                AdmWin.wm_title("PGC Facial Recognition System Admin Home")
                AdmWin.geometry('700x500')
                #AdmWin.wm_iconbitmap('./icons/icon.png')
                #root.iconphoto(True, PhotoImage(file="./icons/icon.png"))
                self.style = ttk.Style()
                width= AdmWin.winfo_screenwidth()
                height= AdmWin.winfo_screenheight()
                AdmWin.geometry("%dx%d+0+0"%(width,height)) 
                AdmWin.wm_state('normal')
                #AdmWin.resizable(0,0)
                
                
                self.eList()

                self.TbFrame=tk.Frame(AdmWin)             
                self.TbFrame.place_configure(relx=0.0,rely=0.0,relwidth =1.0)
                self.AUsrImg = Image.open("icons/addUser1.png")
                self.addEmpImg = ImageTk.PhotoImage(self.AUsrImg)
                self.tbAddUser_btn= ttk.Button(self.TbFrame,image=self.addEmpImg,command =self.employeeReg)
                self.tbAddUser_btn.pack_configure(side ='left', anchor='n')

                self.DUsrImg = Image.open("icons/deleteUser1.png")
                self.delEmpImg = ImageTk.PhotoImage(self.DUsrImg)
                self.tbDelUser_btn= ttk.Button(self.TbFrame,image=self.delEmpImg, command= self.deleteData)
                self.tbDelUser_btn.pack_configure(side='left', anchor='n' )

                self.trainSy = Image.open("icons/retrain1.png")
                self.retrainSyImg = ImageTk.PhotoImage(self.trainSy)
                self.tbRetrainSys_btn= ttk.Button(self.TbFrame,image=self.retrainSyImg)
                self.tbRetrainSys_btn.pack_configure( side='left',anchor='n' )
                
                self.refreshList  = Image.open("icons/refresh1.png")
                self.refreshList = ImageTk.PhotoImage(self.refreshList)
                self.refreshList_btn= ttk.Button(self.TbFrame,image=self.refreshList, command = self.eList )
                self.refreshList_btn.pack_configure( side='left',anchor='n' )

#-----------------------logout button and comand fn-------------------------------                

                self.logout = Image.open("icons/logout1.png")
                self.logoutImg = ImageTk.PhotoImage(self.logout)
                self.tbLogout_btn= ttk.Button(self.TbFrame,image=self.logoutImg, command=AdmWin.destroy )
                self.tbLogout_btn.pack_configure( side='right',anchor='n' )
                

                


#---------------------Table displays employee data -------------------------
        def eList(self):
                treeFrame= tk.Frame(AdmWin)        
                treeFrame.place(relx=0.0, rely=0.035, relheight=1.1, relwidth=1.0 )
                                
                self.tree = ttk.Treeview(treeFrame, columns = (1,2,3,4,5), height = 5, show = "headings")
                self.tree.place(relx=0.0, rely=0.0, relheight=0.9, relwidth=1.0)                               
                self.tree.heading(1, text="Department")
                self.tree.heading(2, text="First Name")
                self.tree.heading(3, text="Last Name")
                self.tree.heading(4, text="Status")
                self.tree.heading(5, text="Access")
                                
                self.tree.column(1, width = 200)                        
                self.tree.column(2, width = 200)
                self.tree.column(3, width = 200)
                self.tree.column(4, width = 150)
                self.tree.column(5, width = 150)
                                
                                
                scroll = ttk.Scrollbar(treeFrame, orient="vertical", command=self.tree.yview)
                scroll.pack(side = 'right', fill = 'y')
                
                
        
                                
                self.tree.configure(yscrollcommand=scroll.set)
                entriesList = []
                EdatRead = open('ed/eLists/employeeListSorted.txt','r',encoding="UTF-8")
                for line in EdatRead:
                        line = (line.strip("\n"))
                        line = line.split(",")
                        entriesList.append(line)
                        self.tree.insert('', 'end', values = (line[0], line[1], line[2], line[3], line[4]) )

               
        def deleteData(self): 
                eDelWin = tk.Toplevel()
                eDelWin.wm_title("Delete Employee Data")
                eDelWin.geometry('400x200')
                #eDelWin.wm_iconbitmap('icons/icon.ico')
                eDelWin.resizable(0,0)
                self.style = ttk.Style() 

                self.delNameL=tk.Label(eDelWin)
                self.delNameL.place(relx=0.0, rely=0.3) 
                self.delNameL.configure(anchor ='w',text="Name:",padx=10)
                self.delNameL.configure(font="-family {Segoe UI} -size 10 -slant "  \
                "roman -underline 0 -weight bold")

                self.delNameEntry=tk.Entry(eDelWin)
                self.delNameEntry.place(relx=0.2, rely=0.3,width =190,height=24) 

                self.deleteBtn = ttk.Button(eDelWin)
                self.deleteBtn.place(relx=0.7, rely=0.3, height=24, width=56)
                self.deleteBtn.configure(text='''Delete''')
                
                
                

                 
        def save(self):
                with open("ed/eLists/employeeList.txt","a",encoding ="UTF-8") as f:
                    #for line in ["Department","First Name","Last Name","Status","Access"]:
                    f.write('\n'+self.selDpt.get()+","+self.FNameEntry.get()+","+self.LNameEntry.get()+","+self.selStatus.get()+","+self.selAccess.get())
                    self.clcEntries()
                    f.close()     
                         
        def clcEntries(self):
            self.selDpt.delete(0,END)
            self.FNameEntry.delete(0,END)
            self.LNameEntry.delete(0,END)
            self.selStatus.delete(0,END)
            self.selAccess.delete(0,END)
                    
       
            


    


        
     

if __name__ == '__main__':
    vp_start_gui()







